@page "/asistencia"

@inject IAsistenciaReuData AsistenciaReuData
@inject IAvisadorData AvisadorData
@inject ICargoReuData CargoReuData
@inject IKsfData KsfData
@inject IPizarraData PizarraData
@inject IRespoReuData RespoReuData
@inject IMaestraData MaestraData
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@attribute [Authorize(Roles = "Admin, AdminChempro, SupIntendente, SupIntendenteGeneral, SuperAdmin")]

<h3>Asistencia</h3>
<p></p>


<BSContainer>

    @if (MaestraData.centro.Count() == 0)
    {
        <div class="loader"></div>
    }
    else
    {

        <BSRow>
            <BSCol Column="4">

                <BSInput InputType="InputType.Select"  @bind-Value="Div">
                    @foreach (var d in MaestraData.centro)
                    {
                    <option value="@d.Centro">@d.Centro</option>
                    }
            </BSInput>
        </BSCol>

        <BSCol ColumnSmall="3">
            <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="Get">   Asistentes  <span class="oi oi-check"></span></BSButton>
        </BSCol>

    </BSRow>

    }

</BSContainer>

<p></p>


@if (CargoReuData.cargoreuss.Count() > 0 && dataIsLoaded == 2)
{
    @if (listaAsistencia.Where(c => c.Cargo.Crbloque == 1).Count() > 0)
    {
        <BSCol Column="4">
            <BSLabel>Bloque: @bloque</BSLabel>
            <BSInput InputType="InputType.Range" step="1" min="1" max="3" @bind-Value="bloque" />
        </BSCol>
    }

    <BSCol Column="6">
        <BSTable IsResponsive="true" IsStriped="true" IsBordered="true">
            <BSTHead Class="cabecera">
                <BSTR>
                    <BSTD>Personal</BSTD>
                    <BSTD>Presencia</BSTD>
                    <BSTD>Suplencia</BSTD>
                </BSTR>
            </BSTHead>
            <BSTBody>
                @if (listaAsistencia.Where(c=>c.Cargo.Crbloque ==1).Count()>0)
                {
                   
                    @foreach (var d in listaAsistencia.Where(c => c.Cargo.Crbloque == bloque))
                    {


                        <BSTR>

                            <BSTD>@d.Cargo.Crbloque</BSTD>
                            <BSTD>
                                <div Class="@BS.Form_Check @BS.Form_Switch">
                                    <BSInputCheckbox CheckedValue="@(1)" Color="BSColor.Success" @bind-Value="d.ArAsistente" />
                                    <BSLabel IsCheckLabel="true">

                                    </BSLabel>
                                </div>
                            </BSTD>
                            <BSTD>
                                <div Class="@BS.Form_Check">
                                    <BSInputCheckbox CheckedValue="@(1)" @bind-Value="d.ArSuplente" />

                                </div>
                            </BSTD>

                        </BSTR>
                    }
                }
                else
                {
                    @foreach (var d in listaAsistencia)
                    {


                        <BSTR>

                        <BSTD>@d.Cargo.Crnombre</BSTD>
                        <BSTD>
                            <div Class="@BS.Form_Check @BS.Form_Switch">
                                <BSInputCheckbox CheckedValue="@(1)" Color="BSColor.Success" @bind-Value="d.ArAsistente" />
                                <BSLabel IsCheckLabel="true">

                                </BSLabel>
                            </div>
                        </BSTD>
                        <BSTD>
                            <div Class="@BS.Form_Check">
                                <BSInputCheckbox CheckedValue="@(1)"  @bind-Value="d.ArSuplente" />
                             
                            </div>
                        </BSTD>

                    </BSTR>
                    }

                }
            </BSTBody>

        </BSTable>
        <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="Save">   Guardar  <span class="oi oi-check"></span></BSButton>
    </BSCol>


}
else if (CargoReuData.cargoreuss.Count() == 0 && dataIsLoaded == 2)
{
    <p>No se ha cargado personal a este centro.</p>
}
else if (dataIsLoaded == 1 && RespoReuData.resporeus.Count() == 0)
{
    <div class="loader"></div>
}



@code {

    // private Asistencium asisform = new Asistencium();
    // private AsistenReu asiform = new AsistenReu();
    // private List<Asistencium> asis = new List<Asistencium>();
    private List<CargoReuDTO> cr = new List<CargoReuDTO>();
    private AsistenReuDTO reuform;
    private string UsrRol { get; set; } = ""; //rol para filtrar

    private int fecha = int.Parse(DateTime.Now.ToString("yyyyMMdd"));

    private NotifiRadzen Notificar = new NotifiRadzen();

    private string mensaje = "", result = "";//resultado del save;
    int dataIsLoaded = 0;
    // private string RadioValue { get; set; }
    private string Div { get; set; }
    private int bloque { get; set; } = 0;//Indica el Bloque de reunion a llenar asistencia
    private List<AsistenReuDTO> listaAsistencia { get; set; }



    private List<Claim> claims { get; set; }

    private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);


    }


    protected override async Task OnInitializedAsync()
    {

        await CreateData();
        UsrRol = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        if (UsrRol == "Admin" | UsrRol == "SuperAdmin")
        {

            await MaestraData.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
        }
        else
        {

            await MaestraData.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Equals("IdCentro"))?.Value);
        }
        Div = claims.FirstOrDefault(c => c.Type.Contains("Centro"))?.Value;


    }

    protected async Task Get()
    {
        if (dataIsLoaded != 1)
        {
            dataIsLoaded = 1;
            await CargoReuData.GetAsistencia(Div, claims.FirstOrDefault(c => c.Type.Equals("Empresa"))?.Value);
            cr = CargoReuData.cargoreuss;
            listaAsistencia = new List<AsistenReuDTO>();

            for (var i = 0; i < cr.Count; i++)
            {

                reuform = new AsistenReuDTO();
                reuform.Ararea = Div;
                reuform.Arfecha = DateTime.Now;
                reuform.Cargo = cr[i];
                listaAsistencia.Add(reuform);
            }


            for (var i = 0; i < cr.Count; i++)
            {

                listaAsistencia[i].Cargo.IdCargoR = CargoReuData.cargoreuss[i].IdCargoR;
            }

            if (listaAsistencia.Any(c => c.Cargo.Crbloque == 1))
            {
                bloque = 1;
            }
            dataIsLoaded = 2;

        }
    }


    protected async Task Save()
    {

        int time = int.Parse(DateTime.Now.ToString("hh"));
        bool validar = true;//chequar si marcaron suplente pero no asistente
        int conteo = 0;//chequar si se dejaron tosos en null
        try
        {
            if ((claims[4].Value == "Venezuela" && time > 8 && time < 10) || (claims[4].Value == "Colombia" && time > 8 && time < 11) || (claims[4].Value == "Guatemala" && time > 9 && time < 13) || (claims[4].Value == "Panamá" && time > 8 && time < 12) )
            {

            
            if (bloque > 0)
            {
                for (int i = listaAsistencia.Count - 1; i >= 0; i--)
                {
                    if (listaAsistencia[i].Cargo.Crbloque != bloque)
                    {
                        listaAsistencia.RemoveAt(i);
                    }
                }
            }

                foreach (var item in listaAsistencia)
                {
                    if(item.ArAsistente==0 & item.ArSuplente==1)
                    {
                        validar = false;
                    }
                    if(item.ArAsistente==0)
                    {
                        conteo++;
                    }
                }
                if (validar==false )
                {

                    NotificationService.Notify(Notificar.Notificacion("advertencia", "Atención", "Si hay un suplente debe marcar la asistencia."));
                    
                }
                else if (conteo == listaAsistencia.Count)
                {
                    NotificationService.Notify(Notificar.Notificacion("advertencia", "Atención", "Todos los cargos estan inasistentes."));
           
                }
                else
                {
                    mensaje = await AsistenciaReuData.Postasistencia(listaAsistencia);

                    if (mensaje == "Registro Exitoso")
                    {
                        NotificationService.Notify(Notificar.Notificacion("exito", mensaje, ""));
                    }
                    else 
                    {
                         NotificationService.Notify(Notificar.Notificacion("error", "Atención", mensaje));
                    }
                    
                    dataIsLoaded = 0;
                   
                }

            }
            else
            {
               
                NotificationService.Notify(Notificar.Notificacion("advertencia", "Atención", "Solo se puede registrar en horario de reunión"));
                dataIsLoaded = 0;
        
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Notificar.Notificacion("error", "Error al Insertar los datos, Intente de Nuevo", ex.Message));
          
        }
    }




    protected async Task Reset()
    {
        // asisform = new Asistencium();
    }


}