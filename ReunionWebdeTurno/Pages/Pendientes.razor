@page "/pendientes"
@page "/pendientes/{accion}/{division}/{linea}/{f1}/{f2}/{tipo}/{est}"
@inject IAsistenciaReuData AsistenciaReuData
@inject IAvisadorData AvisadorData
@inject ICargoReuData CargoReuData
@inject IKsfData KsfData
@inject IPizarraData PizarraData
@inject IRespoReuData RespoReuData
@inject IMaestraData MaestraData
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IJSRuntime IJS
@inject NotificationService NotificationService

<h4>Asuntos</h4>


@if (MaestraData.centro.Count() == 0)
{
    <div class="pt-5">
        <br />
        <div class="loader"></div>
    </div>
}
else
{
    <BSRow>
        <BSCol ColumnLarge="3" ColumnSmall="6">
            <BSLabel>Centro</BSLabel>
            <BSInput InputType="InputType.Select" Value=IdCentro ValueChanged="@((int value) => DivReset(value))" @onchange="BuscarDivision" >>
                <option value="0"> Seleccione </option>
                @foreach (var d in MaestraData.centro)
                {
                    <option value="@d.IdCentro">@d.Centro</option>
                }
            </BSInput>
        </BSCol>

        <BSCol ColumnLarge="3" ColumnSmall="6">
            <BSLabel>División</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="IdDiv">
                <option value="0">Seleccione</option>
                @foreach (var d in MaestraData.divisions)
                {
                    <option value="@d.IdDivision">@d.Ndivision</option>
                }
            </BSInput>
        </BSCol>
        @if (PizarraData.reudiatablas.Count() > 0 && dataIsLoaded == 2)
        {
            <BSCol ColumnLarge="3" ColumnSmall="6">
                <BSLabel>Línea</BSLabel>
                <BSInput InputType="InputType.Select" @bind-Value="NombreLinea" IsDisabled=@valueodt>
                    <option value="Todo">Todo</option>
                    @foreach (var d in MaestraData.lineas)
                    {
                                <option value="@d.Linea">@d.Linea</option>
                    }
                </BSInput>
            </BSCol>

        }
        <BSCol ColumnLarge="3" ColumnSmall="6">
            <BSLabel>Estado</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="Status" IsDisabled=@valueodt>
                <option value="Total Pendiente">Total Pendiente</option>
                <option value="Todo">Todo</option>
                <option value="Pendiente">Pendiente</option>
                <option value="Pendiente-Responsable">Pendiente/Responsable</option>
                <option value="Listo">Listo</option>
                <option value="Cerrado">Cerrado</option>
                <option value="Vencidos">Vencidos</option>
            </BSInput>
        </BSCol>

        @*
    <BSCol ColumnLarge="2" ColumnSmall="5">
    <BSLabel> Desde</BSLabel>
    <BSInput InputType="InputType.Date" @bind-Value="fecha1" />
    </BSCol>

    <BSCol ColumnLarge="2" ColumnSmall="5">
    <BSLabel>Hasta</BSLabel>
    <BSInput InputType="InputType.Date" @bind-Value="fecha2" />
    </BSCol> *@
    </BSRow>
    <p></p>
    <BSRow>

        <BSCol ColumnLarge="3" ColumnSmall="4">
            <BSLabel>Código</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="Codigo" IsDisabled=@valueodt>
                <option value="Todo">Todo</option>
                <option value="1">1- En Curso</option>
                <option value="2">2- Próxima Parada</option>
                <option value="3">3- Falta Repuesto</option>
                <option value="4">4- Falta de Personal</option>
                <option value="5">5- Eq. no Disponible</option>
            </BSInput>
        </BSCol>


        <BSCol ColumnLarge="3" ColumnSmall="8">
            <BSRow>
                <BSLabel>  Ordenar </BSLabel>
            </BSRow>
            <BSInputRadio CheckedValue="@("2")" IsDisabled=@valueodt @bind-Value="tipoconsulta" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true" style="width:50%;">
                F.Trabajo
                <span class="oi oi-cog"></span>
            </BSInputRadio>

            <BSInputRadio CheckedValue="@("0")" IsDisabled=@valueodt @bind-Value="tipoconsulta" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true" style="width:50%;">
                F. Reunión
                <span class="oi oi-people"></span>
            </BSInputRadio>
        </BSCol>


        <BSCol ColumnLarge="3" ColumnSmall="6">
            <BSRow>
                <BSLabel>Buscar</BSLabel>
            </BSRow>
            <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" IsDisabled=@valueodt @onclick="Get" style="width:70%;">  Consultar <span class="oi oi-check"></span></BSButton>
         </BSCol>


         <BSCol ColumnLarge="3" ColumnSmall="6">
             <BSLabel>ODT</BSLabel>  <RadzenSwitch @bind-Value=@valuvisualeodt Change="Cambio" />
             <BSRow>
                 <BSCol>
                     <BSInput InputType="InputType.Text" @bind-Value="BuscarOdt" IsDisabled=@(!valueodt) />
                 </BSCol>
                 <BSCol>
                     <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" @onclick="BuscarxOdt" IsDisabled=@(!valueodt)>  <span class="oi oi-magnifying-glass"></span></BSButton>
                 </BSCol>
             </BSRow>
         </BSCol>

     </BSRow>


    @*Filltros extra*@
    <BSRow>
        @if (PizarraData.reudiatablas.Count() > 0 && dataIsLoaded == 2)
        {
            <BSCol Column="3">
                <BSLabel>Responsable</BSLabel>
                <BSInput InputType="InputType.Select" IsDisabled=@valueodt @bind-Value="idrespo">
                    <option value=0>Todo</option>
                    @foreach (var d in RespoReuData.resporeus)
                    {

                        <option value="@d.IdResReu">@d.Rrnombre</option>

                    }
                </BSInput>
            </BSCol>


            <BSCol Column="3">
                <BSLabel>Ksf</BSLabel>

                <BSInput InputType="InputType.Select" IsDisabled=@valueodt @bind-Value="IdKsf">

                    <option value="0">Todo</option>
                    @foreach (var d in KsfData.ksfs)
                    {
                        <option value="@d.Idksf">@d.KsfNombre</option>
                    }

                </BSInput>
            </BSCol>

            <BSCol Column="3">
                <BSRow>
                    <BSLabel>Imprimir</BSLabel>
                </BSRow>
                <BSButton IsOutlined Color="BSColor.Success" Size="Size.ExtraSmall" IsDisabled=@valueodt @onclick="PrintDocument">  <span class="oi oi-print"></span></BSButton>
             </BSCol>

        }
    </BSRow>
}

@*Tabla vieja*@
@if (PizarraData.reudiatablas.Count() > 0 && dataIsLoaded == 2)
{
    <div class=" pt-3">

        <BSTable IsStriped="true" IsResponsive=true IsBordered="true" IsHoverable="true">
            <BSTHead Class="cabecera">
                <BSTR>
                    @*<BSTD>Id</BSTD>*@
                    <BSTD>Área</BSTD>
                    <BSTD>Ksf</BSTD>
                    <BSTD>C. Equipo</BSTD>
                    <BSTD Class="col-5">Discrepancia</BSTD>
                    <BSTD>Código</BSTD>
                    <BSTD Class="col-4">Plan de Acción</BSTD>
                    <BSTD>Tiempo</BSTD>
                    <BSTD>Responsable</BSTD>
                    <BSTD>Estado</BSTD>
                    <BSTD>ODT</BSTD>
                    <BSTD>Fecha de Reunión</BSTD> @*Fecha del dia de reunion*@
                    <BSTD>Fecha del Trabajo</BSTD>@*Fecha de listo el trabajo*@
                    <BSTD></BSTD>
                </BSTR>
            </BSTHead>
            <BSTBody>


                @foreach (var d in listareu)
                {
                    @if (Codigo == d.RdcodDis | Codigo == "Todo")
                    {

                        @if (NombreLinea == "Todo" | NombreLinea == d.Rdarea)
                        {
                            @if (idrespo == 0 | idrespo == d.IdResReu)
                            {

                                @if (IdKsf == 0 | IdKsf == d.Idksf)
                                {

                                    <BSTR Class="@GetClassVencido(d.RdfecTra, d.Rdstatus)">

                                        @*<BSTD>@d.IdReuDia</BSTD>*@
                                        <BSTD>@d.Rdarea</BSTD>
                                            <BSTD>@d.Ksf</BSTD>
                                            <BSTD>@d.RdcodEq</BSTD>
                                            <BSTD>@d.Rddisc.ToUpperInvariant()</BSTD>
                                            <BSTD>@d.RdcodDis</BSTD>
                                            <BSTD Class="textotabla">@d.RdplanAcc</BSTD>
                                            <BSTD>@d.Rdtiempo</BSTD>

                                            @if (@d.Responsable == "Por Definir")
                                        {
                                            <BSTD Class="Definir">@d.Responsable </BSTD>
                                        }
                                        else
                                        {
                                            <BSTD>@d.Responsable </BSTD>
                                        }

                                        @if (@d.Rdstatus == "Listo")
                                        {
                                            <BSTD Class="listo">@d.Rdstatus</BSTD>
                                        }
                                        else if (@d.Rdstatus == "Cerrado")
                                        {
                                            <BSTD Class="Cerrado">@d.Rdstatus</BSTD>
                                        }
                                        else
                                        {
                                            <BSTD Class="pendiente">@d.Rdstatus</BSTD>
                                        }
                                        <BSTD>@d.Rdodt</BSTD>
                                            <BSTD>@d.RdfecReu.ToString("dd/MM/yyyy")</BSTD>
                                            <BSTD>@d.RdfecTra.ToString("dd/MM/yyyy")</BSTD>
                                            <BSTD>
                                                <BSRow>
                                                    <BSCol>
                                                    @if(isEditar){
                                                        <button class="btn btn-success" @onclick="(() => Editar(d.IdReuDia))"><i class="oi oi-pencil"></i></button>
                                                    }
                                                    </BSCol>
                                                    <BSCol>
                                                        @if (UsrAdmin != "")
                                                    {
                                                        <BSButton Color="BSColor.Primary" IsOutlined @onclick="(() => GetHistory(d.IdReuDia))" Target="History"><i class="oi oi-eye"></i></BSButton>
                                                    }
                                                </BSCol>
                                            </BSRow>
                                        </BSTD>
                                    </BSTR>
                                }
                            }
                        }
                    }
                }
            </BSTBody>
        </BSTable>
    </div>

    @*Mostrar la trazabilidad*@
    <BSModal IsCentered="true" DataId="History">
        <Header>Trazabilidad</Header>
        <Content>
            <h5>Cambios de Estados:</h5>
            @if (cambiostatuss.Count() > 0 && cargandocambio == true)
            {
                <BSTable IsResponsive="true" IsStriped="true" IsBordered="true">
                    <BSTHead Class="cabecera">
                        <BSTR>
                            <BSTD>Fecha del Cambio</BSTD>
                            <BSTD>Status Nuevo</BSTD>
                            <BSTD>Usuario</BSTD>
                        </BSTR>
                    </BSTHead>
                    <BSTBody>
                        @foreach (var d in cambiostatuss)
                        {
                            <BSTR>
                                <BSTD>@d.Cbfecha</BSTD>
                                    <BSTD>@d.Cbstat</BSTD>
                                    <BSTD>@d.Cbuser</BSTD>
                                </BSTR>
                        }
                    </BSTBody>
                </BSTable>
            }
            else if (cambiostatuss.Count() == 0 && cargandocambio == false)
            {
                <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Success" />
            }
            else if (cambiostatuss.Count() == 0 && cargandocambio == true)
            {
                <p>No hay registros aún...</p>
            }
            <p></p>
            <p></p>
            <h5>Cambios de Fecha de Trabajo:</h5>

            @if (cambiofechas.Count() > 0)
            {
                <BSTable IsResponsive="true" IsStriped="true" IsBordered="true">
                    <BSTHead Class="cabecera">
                        <BSTR>
                            <BSTD>Fecha del Cambio</BSTD>
                            <BSTD>Nueva Fecha de Trabajo</BSTD>
                            <BSTD>Usuario</BSTD>
                        </BSTR>
                    </BSTHead>
                    <BSTBody>
                        @foreach (var d in cambiofechas)
                        {
                            <BSTR>
                                <BSTD>@d.Cffec</BSTD>
                                    <BSTD>@d.CffecNew</BSTD>
                                    <BSTD>@d.Cfuser</BSTD>
                                </BSTR>
                        }
                    </BSTBody>
                </BSTable>
            }
            else if (cambiofechas.Count() == 0 && cargandocambio == false)
            {
                <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Success" />
            }
            else if (cambiofechas.Count() == 0 && cargandocambio == true)
            {
                <p>No hay registros aún...</p>
            }
        </Content>
        <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Success" @onclick="modal.HideAsync">Aceptar</BSButton>

        </Footer>
    </BSModal>


}
else if (dataIsLoaded == 1 && PizarraData.reudiatablas.Count() == 0)
{
    <div class="loader"></div>
}
else if (dataIsLoaded == 2 && PizarraData.reudiatablas.Count() == 0)
{
    <p>No hay datos para mostrar.</p>
}

@*TODO: culminar tabla radzen con los filtros para siguiente version*@
@*
@if (DbReunionService.reudiatablas.Count() > 0 && dataIsLoaded == 2)
{
    <div class="pt-4">
    @if (UsrRol != "")
    {
        listareu = DbReunionService.reudiatablas.Where(r => r.IdResReuNavigation.Rrnombre.StartsWith(UsrRol)).ToList();
    }
    else
    {
        listareu = DbReunionService.reudiatablas;

    }
    <RadzenDataGrid TItem="ReuDium" Data="@listareu" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    LogicalFilterOperator="LogicalFilterOperator.Or"
    AllowColumnResize=true
    SelectionMode="DataGridSelectionMode.Single" AllowPaging=true  PageSize="5"
     OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" ClearFilterText="Limpiar" ApplyFilterText="Ok" FilterText="Filtrar por:"
    Responsive="true" GridLines="DataGridGridLines.Both" EmptyText="Sin resultados..." ColumnWidth="80px" >

        <Columns>

            <RadzenDataGridColumn TItem="ReuDium" Property="Rdarea" Title="Área" Frozen=true MinWidth="40px"  TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="ReuDium" Property="IdksfNavigation.KsfNombre" Title="Ksf" Width="90px" />
            <RadzenDataGridColumn TItem="ReuDium" Property="RdcodEq" Title="C. Equipo"  />
            <RadzenDataGridColumn TItem="ReuDium" Property="Rddisc" Title="Discrepancia" MinWidth="300px" Width="350" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="ReuDium" Property="RdcodDis" Title="Código" Width="60px" />
             <RadzenDataGridColumn TItem="ReuDium" Property="RdplanAcc" Title="Plan de Acción" MinWidth="180px" Width="250" />
            <RadzenDataGridColumn TItem="ReuDium" Property="Rdtiempo" Title="Tiempo" Width="60px" />
                <RadzenDataGridColumn TItem="ReuDium" Property="IdResReuNavigation.Rrnombre" Title="Responsable" Width="110px"  />

            <RadzenDataGridColumn TItem="ReuDium" Property="Rdstatus" Title="Estado" Width="120px">
                <Template Context="d">
                    @if (d.Rdstatus == "Listo")
                    {
                        <div Class="listo">@d.Rdstatus</div>
                    }
                    else if (d.Rdstatus == "Cerrado")
                    {
                        <div Class="Cerrado">@d.Rdstatus</div>
                    }
                    else if (d.Rdstatus == "Pendiente/Responsable")
                    {
                        <div Class="pendiente">Pendiente/ Responsable</div>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ReuDium" Property="Rdodt" Title="ODT" Width="60px" />

            <RadzenDataGridColumn TItem="ReuDium" Property="RdfecReu" Title="Fecha Reunión" Sortable=true>
                <Template Context="d">
                    @d.RdfecReu.ToString("dd/MM/yyyy")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Property="RdfecTra" Title="Fecha Trabajo" Sortable=true >
                <Template Context="d">
                    @d.RdfecTra.ToString("dd/MM/yyyy")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ReuDium" Title="" Width="50px" Filterable=false>
                <Template Context="d">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Text="" Variant="Variant.Outlined" Shade="Shade.Darker" Click="(() => Editar(d.IdReuDia))" Icon="edit" />
                    @if (UsrAdmin != "")
                    {
                        <BSButton Color="BSColor.Primary" Size="Size.Small" IsOutlined @onclick="(() => GetHistory(d.IdReuDia))" Target="History"><i class="oi oi-eye"></i></BSButton>
                    }
                </Template>
            </RadzenDataGridColumn>
            </Columns>
    </RadzenDataGrid>
    </div>
}
<style>


    .rz-datatable-data td .rz-cell-data, .rz-grid-table td .rz-cell-data {
        color: var(--rz-grid-cell-color);
        font-size: var(--rz-grid-cell-font-size);
        line-height: var(--rz-grid-cell-line-height);
        display: block;
        overflow: clip;
        text-overflow: clip;
        white-space: normal;
    }

    .rz-datatable-thead th .rz-column-title-content, .rz-grid-table thead th .rz-column-title-content {
        white-space: break-spaces !important;

    }

    .rz-grid-table {
        width: 100%;
        position: relative;
        border-collapse: separate;
        border-spacing: 0;
    }

.rz-grid-table thead {
        position: sticky;
        top: 0;
        z-index: 2;
        }

   .rz-datatable-thead th .rz-column-title, .rz-grid-table thead th .rz-column-title {
                align-items: flex-start;
                padding-left: 2px;
            }

        .rz-datatable-data td, .rz-grid-table td {
            padding: 5px;
            border-bottom: var(--rz-grid-bottom-cell-border);
        }

</style> *@

@code {

    [Parameter]
    public string? accion { get; set; }//centro
    [Parameter]
    public string? division { get; set; }//division    
    [Parameter]
    public string? linea { get; set; }//division
    [Parameter]
    public string? f1 { get; set; }
    [Parameter]
    public string? f2 { get; set; }
    [Parameter]
    public string? tipo { get; set; }
    [Parameter]
    public string? est { get; set; }

    private string mensaje = "";

    int dataIsLoaded = 0;
    string ayer = DateTime.Now.AddDays(-1).ToString("yyyyMMdd");
    private bool data { get; set; } = false; //Centro
    private bool valuvisualeodt { get; set; } = false; //valor intermediario de valueodt
    private bool valueodt { get; set; } = false; //buscar solo por odt
    private int IdCentro { get; set; } //id del Centro
    private int IdDiv { get; set; } //id de la division
    private int IdKsf { get; set; } //id del Ksf
    private string NombreLinea { get; set; } = "Todo";//id de la linea
    private string? BuscarOdt { get; set; } = null;//valor de Odt
    private string Codigo { get; set; } = "Todo"; //Codigo
    private string Status { get; set; } = "Total Pendiente"; //Status
    private string UsrAdmin { get; set; } = ""; //permisos de admin
    private string UsrRol { get; set; } = ""; //rol para filtrar
    private bool cargandocambio { get; set; } = false; //para cargar los datos del trazabilidad
    private string tipoconsulta { get; set; } = "0"; //1-fecha de reuinion 0 fecha trabajo
    private int idrespo { get; set; }  //responsable a filtarint.Parse(claims[9].Value)
    public DateTime fecha1;
    public DateTime fecha2;
    List<ReuDiumDTO> listareu = new List<ReuDiumDTO>();//filtar los responsables
    List<CambFecDTO> cambiofechas = new List<CambFecDTO>();
    List<CambStatDTO> cambiostatuss = new List<CambStatDTO>();
    List<MaestraVDTO> _divisiones = new List<MaestraVDTO>();
    private NotifiRadzen Notificar = new NotifiRadzen();//Logic para crear las noyificaciones radzen
    private bool isEditar { get; set; } = true;
    private List<Claim> claims { get; set; }    


    private async Task CreateData()

    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        fecha1 = DateTime.Now;
        fecha2 = DateTime.Now;
        await CreateData();

        //Cargar Listas
        @* await DivReset(IdCentro = int.Parse(claims.FirstOrDefault(c => c.Type.Equals("IdCentro"))?.Value ?? "0")); *@
        @* IdDiv = int.Parse(claims.FirstOrDefault(c => c.Type.Contains("IdDiv"))?.Value ?? "0"); *@
        await KsfData.Getksf();
        await RespoReuData.GetResReu();
        RespoReuData.resporeus = RespoReuData.resporeus.Where(a => a.Rrdesc == claims.FirstOrDefault(c => c.Type.Contains("Empresa"))?.Value | string.IsNullOrEmpty(a.Rrdesc)).ToList();
        PizarraData.reudiatablas = new List<ReuDiumDTO>();


        //TODO: Crear logica con funcion qur retorne esto.se usa en hoistoricos e impresiones tambien
        switch (claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value)
        {
            
            case "Admin":
            case "SuperAdmin":
                UsrAdmin = "SuperAdmin";
                await MaestraData.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;

            case "SupIntendenteGeneral":
                UsrAdmin = "SupIntendenteGeneral";
                await MaestraData.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;

            case "Planificador":
            case "SupIntendente":
                await MaestraData.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;
            case "Auditores":
                isEditar = false;
                await MaestraData.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;

            case "MttoAdmin":
                UsrRol = "Mtto";
                await MaestraData.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;
            case "SeguridadAdmin":
                UsrRol = "Seguridad";//Seguridad para filtar por seguridad
                await MaestraData.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;
            case "CalidadAdmin":
                UsrRol = "Calidad";//Calidad para filtar por calidad
                await MaestraData.GetCentrosxEmpresa("All" + claims.FirstOrDefault(c => c.Type.Contains("IdEmpresa"))?.Value);
                break;

            case "Mantenimiento":
                UsrRol = "Mtto";
                await MaestraData.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;

            default:
                UsrRol = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
                await MaestraData.GetCentrosxEmpresa(claims.FirstOrDefault(c => c.Type.Contains("IdCentro"))?.Value);
                break;
        }


        //Eliminar el ODT para un  nuevo cargado

        BuscarOdt = await LocalStorage.GetItemAsStringAsync("OdtValue");
        if (string.IsNullOrEmpty(BuscarOdt))
        {
            valuvisualeodt= valueodt = false;
            await LocalStorage.RemoveItemAsync("OdtValue");
        }
        else
        {
            valuvisualeodt =valueodt = true;
        }
    }


    protected async Task BuscarDivision(ChangeEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(e.Value?.ToString()) && int.TryParse(e.Value.ToString(), out int IdCentro))
        {

            try
            {
                if (IdCentro != 0)
                {
                    MaestraData.divisions = await MaestraData.ObtenerDivisionDelCentro(IdCentro);
                }
            }
            catch (Exception ex)
            {
                mensaje = "Error: " + ex.Message;
            }
        }
        else
        {
            mensaje = "El valor del centro seleccionado no es válido.";
        }
    }


    protected async Task Get()
    {
        if (IdCentro != 0 & IdDiv != 0)
        {
            // error = null;
            if (dataIsLoaded != 1)
            {
                dataIsLoaded = 1;
                await PizarraData.GetPendientes(IdCentro.ToString(), IdDiv.ToString(), fecha1, fecha2, tipoconsulta, Status);
                ObtenerReunionesPorRol();//actualizar tabla
                dataIsLoaded = 2;

            }

        }
        else
        {

            NotificationService.Notify(Notificar.Notificacion("advertencia", "Atención", "Seleccione los valores en las listas"));
        }
    }

    private async Task BuscarxOdt()
    {


        if (valueodt && !string.IsNullOrEmpty(BuscarOdt))
        {
            if (IdCentro != 0 & IdDiv != 0)
            {


                if (dataIsLoaded != 1)
                {
                    dataIsLoaded = 1;
                    listareu = await PizarraData.GetByODT(BuscarOdt, IdCentro.ToString(), IdDiv.ToString());
                    dataIsLoaded = 2;

                }

                if (listareu.Count() > 0)
                { await LocalStorage.SetItemAsStringAsync("OdtValue", BuscarOdt); }
            }
            else
            {

                NotificationService.Notify(Notificar.Notificacion("advertencia", "Atención", "Seleccione los valores en las listas"));
            }
        }
        else
        {
            NotificationService.Notify(Notificar.Notificacion("advertencia", "Ingrese ODT", ""));
        }


    }

    private async Task Cambio()
    {

        if (valueodt == true)
        {
            await LocalStorage.RemoveItemAsync("OdtValue");
            BuscarOdt = null;
            valueodt = false;
        }
        else
        {
            valueodt = true;

        }


    }
    private Task DivReset(int idcentro)
    {

        IdCentro = idcentro;
        IdDiv = 0;

        MaestraData.divisions = MaestraData.divisions
        .Where(c => c.IdCentro == idcentro)
        @* .SelectMany(c => c.Divisions) *@
        .ToList();

        return Task.CompletedTask;
    }
    protected async Task GetHistory(int idreu)
    {
        cargandocambio = false;
        cambiostatuss = new List<CambStatDTO>();
        cambiofechas = new List<CambFecDTO>();
        await AvisadorData.GetCambioStatus(idreu);
        await AvisadorData.GetCambioFecha(idreu);
        cambiofechas = AvisadorData.cambiofecha;
        cambiostatuss = AvisadorData.cambiostatus;

        cargandocambio = true;

    }


    void Editar(int id)
    {
        NavigationManager.NavigateTo($"EditDisc/{id}/{tipoconsulta}/{NombreLinea}/{fecha1.ToString("dd-MM-yyyy")}/{fecha2.ToString("dd-MM-yyyy")}/{Status}");

    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {


            if (accion != null)
            {
                //Si esta filtrando por ODT se consulta la odt si el campo es vacio se procede normal
                BuscarOdt = await LocalStorage.GetItemAsStringAsync("OdtValue");

                if (string.IsNullOrEmpty(BuscarOdt) && !valueodt)
                {
                    valuvisualeodt = valueodt = false;


                    string[] fec1 = f1.Split('-');
                    string[] fec2 = f2.Split('-');

                    //año, mes dia
                    DateTime date1 = new DateTime(int.Parse(fec1[2]), int.Parse(fec1[1]), int.Parse(fec1[0]));
                    DateTime date2 = new DateTime(int.Parse(fec2[2]), int.Parse(fec2[1]), int.Parse(fec2[0]));
                    fecha1 = date1;
                    fecha2 = date2;
                    IdCentro = int.Parse(accion);
                    IdDiv = int.Parse(division);
                    Status = est;
                    NombreLinea = linea;
                    tipoconsulta = tipo;
                    dataIsLoaded = 1;
                    await PizarraData.GetPendientes(accion, division, date1, date2, tipo, est);
                    ObtenerReunionesPorRol();//actualizar tabla

                    dataIsLoaded = 2;
                }
                else
                {
                    valuvisualeodt = valueodt;
                    await BuscarxOdt();

                }

            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(Notificar.Notificacion("error", "Ocurrió un error", "Por favor recargue la página."));

        }

    }
    public void ObtenerReunionesPorRol()
    {
        if (!string.IsNullOrEmpty(UsrRol))
        {
            listareu = PizarraData.reudiatablas.Where(r => r.Responsable.StartsWith(UsrRol)).ToList();

        }
        else
        {
            listareu = PizarraData.reudiatablas;

        }
    }


    public async Task PrintDocument()
    {
        //NavigationManager.NavigateTo($"TablaReunion/{IdCentro.ToString()}/{IdDiv.ToString()}/{DateTime.Now.AddDays(-1).ToString("dd-MM-yyyy")}/{DateTime.Now.ToString("dd-MM-yyyy")}/1", forceLoad: true);
        await IJS.InvokeAsync<object>("open", new object[] { $"TablaPendientes/{IdCentro.ToString()}/{IdDiv.ToString()}/{NombreLinea}/{fecha1.ToString("dd-MM-yyyy")}/{fecha2.ToString("dd-MM-yyyy")}/{tipoconsulta}/{Status}/{idrespo}", "_blank" });
    }
    string GetClassVencido(DateTime ft, string estado)
    {
        return ft.Date < DateTime.Now.Date && estado.StartsWith("Pendiente") ? "Vencido" : "";
    }
}
