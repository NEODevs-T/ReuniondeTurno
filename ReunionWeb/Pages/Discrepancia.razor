@page "/discrepancia"

@inject ICausaCalidadData CausaCalidadData  
@inject IAsistenciaReuData AsistenciaReuData
@inject IAvisadorData AvisadorData
@inject ICargoReuData CargoReuData
@inject IKsfData KsfData
@inject IPizarraData PizarraData
@inject IRespoReuData RespoReuData
@inject IMaestraData MaestraData
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService

@attribute [Authorize(Roles = "Admin, AdminChempro, SupIntendente, SupIntendenteGeneral,SuperAdmin")]


<h3>Discrepancias</h3>

<p></p>

<BSForm Model="Reuniondb" Class="boxhome" IsRow="true" Gutters="Gutters.Medium" OnSubmit="Insert" OnReset="Reset">
    <DataAnnotationsValidator />
    <BSCol ColumnMedium="8">
        @_message
        <BSValidationSummary />
    </BSCol>
    <BSRow>

    
        <BSCol Column="3">
            <BSLabel>Centro</BSLabel>
            <BSInput InputType="InputType.Select" @onchange="BuscarDivision" @bind-Value="idCent">
                <option value="0">Seleccione...</option>
                @foreach (var d in MaestraData.centro)
                {
                    <option value="@d.IdCentro">@d.Centro</option>
                }
            </BSInput>
        </BSCol>



        <BSCol Column="3">
            <BSLabel>Division</BSLabel>
            <BSInput InputType="InputType.Select" @onchange='BuscarLinea' @bind-Value="idDiv">
                <option value="0">Seleccione...</option>
                @if(MaestraData.centro != null){
                    @foreach (var d in MaestraData.divisions)
                    {
                            <option value="@d.IdDivision">@d.Ndivision</option>

                    }
                }
            </BSInput>
        
        </BSCol>


        <BSCol Column="3">
            <BSLabel>Línea</BSLabel>
            <BSInput InputType="InputType.Select" @onchange='BuscarEquipo' @bind-Value="idLin">
                <option value="0">Seleccione...</option>
                @foreach (var d in MaestraData.lineas)
                {
                    <option value="@d.IdLinea">@d.Linea</option>
                }
            </BSInput>
          
        </BSCol>

    </BSRow>
    <p></p>
    <BSRow>

        <BSCol Column="2">
            <BSRow>
                <BSLabel>Filtrar: </BSLabel>
            </BSRow>


            <BSInputRadio CheckedValue="@("0")" @bind-Value="tipoequipo" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true">
                <span class="oi oi-list"></span>
            </BSInputRadio>

            <BSInputRadio CheckedValue="@("1")" @bind-Value="tipoequipo" IsToggle="true" Size="Size.ExtraSmall" Color="BSColor.Success" IsOutlined="true">
                <span class="oi oi-magnifying-glass"></span>
            </BSInputRadio>


        </BSCol>
        @if (MaestraData.centro.Count > 0 & tipoequipo == "0")
        {
          
            @if (Reuniondb.Rdcentro != "Chempro")
            {
                <BSCol Column="4">
                    <BSLabel>C. Equipo</BSLabel>
                    <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.RdcodEq">

                        <option value="">Seleccione...</option>
                        @foreach (var d in MaestraData.equipos)
                        {
                                <option value="@d.EcodEquiEam">@d.EcodEquiEam - @d.EnombreEam</option>
                        }


                    </BSInput>
               
                </BSCol>

            }
            else
            {
                <BSCol Column="4">
                    <BSLabel>C. Equipo</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="Reuniondb.RdcodEq" />
                  
                </BSCol>
            }
        }
        else if (MaestraData.centro.Count > 0 & tipoequipo == "1")
        {
            <BSCol Column="4">
                <BSLabel>C. Equipo</BSLabel>
                <div class="autocomplete">
                    <input @bind=selectedEquipoId @oninput=HandleInput class="form-control filter" />
                    @if (equiposfiltro is not null)
                    {
                        <ul class="options">
                            @if (equiposfiltro.Any())
                            {

                                @foreach (var e in equiposfiltro)
                                {
                                        <li class="option" @onclick=@(_ => SelectEquipo(e.EcodEquiEam))>
                                            <span class="option-text">@e.EcodEquiEam - @e.EnombreEam</span>
                                        </li>
                                }
                            }
                            else
                            {
                                <li class="disabled option">No results</li>
                            }
                        </ul>
                    }
                </div>
                @if (!string.IsNullOrWhiteSpace(selectedEquipoId))
                {
                    <p class="mt-4">
                        @selectedEquipoName - <strong>@selectedEquipoId</strong>
                    </p>
                }
              
            </BSCol>
        }
      


        <BSCol Column="3">
    <BSLabel>Ksf</BSLabel>

    <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.Idksf">
        <option value="">Seleccione...</option>
        @foreach (var d in KsfData.ksfs.Where(x => x.Idksf != 6))
        {
            <option value="@d.Idksf">@d.KsfNombre</option>
        }
    </BSInput>
</BSCol>



    </BSRow>
    <p></p>
    <BSRow>
        <BSCol Column="9">
            <BSLabel>Discrepancia</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="Reuniondb.Rddisc" />
         
        </BSCol>
    </BSRow>

    <p></p>

<BSCol Column="3">
    <BSLabel>Responsable</BSLabel>
    <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.IdResReu" @onchange="OnResponsableChanged">
        <option value="">Seleccione...</option>
        @foreach (var d in RespoReuData.resporeus)
        {
            <option value="@d.IdResReu">@d.Rrnombre</option>
        }
    </BSInput>
</BSCol>

@if (IsObservacionesVisible)
{
    <BSCol Column="3">
        <BSLabel>Observaciones de Calidad</BSLabel>
        <BSInput InputType="InputType.Select" @bind-Value="Reuniondb.IdCausaCal" @onchange="OnCausaCalidadChanged">
            <option value="">Seleccione...</option>
            @foreach (var e in CausaCalidadData.causaCals)
            {
                <option value="@e.IdCausaCal">@e.Ccnombre</option>
            }
        </BSInput>
    </BSCol>
    <BSCol Column="3">
        <BSLabel>Ubicación</BSLabel>
        <BSInput InputType="InputType.Text" @bind-Value="@Ubicacion" @oninput="OnUbicacionChanged" />
    </BSCol>
}


    <p></p>

    <BSCol Column="12">
        <BSButton Color="BSColor.Success" Size="Size.ExtraSmall" IsDisabled="isDesactivado" IsSubmit>  Guardar <span class="oi oi-check"></span></BSButton>
        <BSButton Color="BSColor.Primary" Size="Size.ExtraSmall" IsReset>  Nuevo </BSButton>
    </BSCol>



</BSForm>



@code {
    private bool IsObservacionesVisible { get; set; } = false;
    
    [CascadingParameter]
    private List<Claim> claims { get; set; }

    private string Ubicacion { get; set; } = null;
    ReunionDTO Reuniondb = new ReunionDTO();
    private NotifiRadzen Notificar = new NotifiRadzen();
    private string _message = "";
    private DateTime fechahoy, fechatrabajo = DateTime.Today;
    private string fechahoy2;
    private int Idretornado;
    private string tipoequipo { get; set; } = "1";
    CambStatDTO CambStata = new CambStatDTO();
    CambFecDTO CambFech = new CambFecDTO();
    ReunionDTO regisReuDia = new ReunionDTO();

    private int idCent { get; set; }
    private int idDiv { get; set; }
    private int idLin { get; set; }
    private int idEqui { get; set; }
    private string mensaje = "";
    private string Notificacion = "";
    private bool isDesactivado { get; set; } = false;
    private List<AsistenReuDTO> listaAsistencia { get; set; } = new List<AsistenReuDTO>();

    int reunionTurno = 2;
    List<EquipoEamDTO>? equiposfiltro;
    string? selectedEquipoId;
    string? selectedEquipoName;
    string? filter;
    bool codsuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await CreateData();
        await KsfData.Getksf();
        await RespoReuData.GetResReu();
        await CausaCalidadData.GetCausasCalidad();

        Reuniondb.IdCausaCal = 1;
        Reuniondb.OrigenCal = "";

        if (claims != null && claims.Count > 1 && (claims[1]?.Value == "Admin" || claims[1]?.Value == "SuperAdmin"))
        {
            await MaestraData.GetCentrosxEmpresa("All" + claims[10].Value);
        }
        else
        {
            await MaestraData.GetCentrosxEmpresa(claims[11].Value);
        }

        idCent = 0;
        idDiv = 0;
        idLin = 0;
        idEqui = 0;

        RespoReuData.resporeus = RespoReuData.resporeus
            .Where(a => a.Rrdesc == claims.FirstOrDefault(c => c.Type.Contains("Empresa"))?.Value || string.IsNullOrEmpty(a.Rrdesc))
            .ToList();
    }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = user.Claims.ToList();
    }

    private void OnResponsableChanged(ChangeEventArgs e)
{
    var selectedResponsableId = e.Value?.ToString();

    if (!string.IsNullOrEmpty(selectedResponsableId))
    {
        Reuniondb.IdResReu = int.Parse(selectedResponsableId);
        Reuniondb.Responsable = RespoReuData.resporeus
            .FirstOrDefault(k => k.IdResReu == Reuniondb.IdResReu)?.Rrnombre;

        IsObservacionesVisible = Reuniondb.IdResReu == 9;

        // Si el responsable es 9, limpiar el campo de Ubicación
        if (Reuniondb.IdResReu == 9)
        {
            Ubicacion = ""; // Limpiamos el valor de Ubicación
        }
        else
        {
            Reuniondb.IdCausaCal = 1;
            Reuniondb.OrigenCal = string.Empty;
        }

    }
    else
    {
        IsObservacionesVisible = false;
        Reuniondb.IdCausaCal = 1;
        Reuniondb.OrigenCal = "N/A";
    }

    StateHasChanged();
}

    private void OnCausaCalidadChanged(ChangeEventArgs e)
    {
        var selectedCausaCalId = e.Value?.ToString();
        Reuniondb.IdCausaCal = string.IsNullOrEmpty(selectedCausaCalId) ? 1 : int.Parse(selectedCausaCalId);
        StateHasChanged();
    }

    private void OnUbicacionChanged(ChangeEventArgs e)
    {
        Reuniondb.OrigenCal = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    protected async Task BuscarDivision(ChangeEventArgs e)
    {
        idCent = int.Parse(e.Value.ToString());
        idDiv = idLin = idEqui = 0;
        try
        {
            if (idCent != 0)
                MaestraData.divisions = await MaestraData.ObtenerDivisionDelCentro(idCent);
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
        }
    }

    protected async Task BuscarLinea(ChangeEventArgs e)
    {
        idDiv = int.Parse(e.Value.ToString());
        idLin = idEqui = 0;
        try
        {
            if (idCent != 0)
                MaestraData.lineas = await MaestraData.ObtenerLasLineasPorDivision(idDiv);
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
        }
    }

    protected async Task BuscarEquipo(ChangeEventArgs e)
    {
        idLin = int.Parse(e.Value.ToString());
        idEqui = 0;
        await BuscarIdMaster(idLin);
        try
        {
            if (idCent != 0)
                MaestraData.equipos = await MaestraData.GetEquiposEAMPorLinea(idLin);
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
        }
    }

    protected async Task BuscarIdMaster(int e)
    {
        idLin = e;
        try
        {
            if (idCent != 0)
                MaestraData.maestra = await MaestraData.GetMaestraXLinea(idLin);
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
        }
    }

    protected async Task Insert(EditContext d)
{
    isDesactivado = true;
    try
    {
        Reuniondb.IdMaster = MaestraData.maestra.First(x => x.IdLinea == idLin).IdMaster;
        Reuniondb.Rdarea = MaestraData.lineas.First(x => x.IdLinea == idLin).Linea;
        Reuniondb.Rdstatus = "Pendiente";
        Reuniondb.IdTipReu = reunionTurno;
        Reuniondb.IdPais = int.Parse(claims.First(c => c.Type == "IdPais")?.Value);
        Reuniondb.IdEmpresa = int.Parse(claims.First(c => c.Type == "IdEmpresa")?.Value);
        Reuniondb.Ksf = KsfData.ksfs.First(k => k.Idksf == Reuniondb.Idksf).KsfNombre;

        if (tipoequipo == "1")
            Reuniondb.RdcodEq = selectedEquipoId;

        if (d.Validate())
        {
            Reuniondb.RdfecReu = fechahoy = DateTime.Now;
            Reuniondb.RdfecTra = fechatrabajo;
            Reuniondb.Rdcentro = MaestraData.centro.First(c => c.IdCentro == idCent).Centro;

            // Aquí aseguramos que si Ubicacion está vacío, se asigna "N/A"
            if (string.IsNullOrEmpty(Ubicacion))
            {
                Reuniondb.OrigenCal = "N/A";
            }
            else
            {
                Reuniondb.OrigenCal = Ubicacion;
            }

            Reuniondb.Rddiv = MaestraData.divisions.FirstOrDefault(e => e.IdDivision == idDiv)?.Ndivision;

            if (ValidateFields(Reuniondb))
            {
                CambStata = new CambStatDTO { Cbfecha = DateTime.Now, Cbstat = "Pendiente", Cbuser = claims[2].Value + " " + claims[3].Value };
                CambFech = new CambFecDTO { Cffec = DateTime.Now, CffecNew = DateTime.Now, Cfuser = claims[2].Value + " " + claims[3].Value };

                var result = await AvisadorData.InsertarRegistros(new RegistroCambiosDTO(CambFech, CambStata, Reuniondb));
                if (result)
                {
                    ResetFields();
                    NotificationService.Notify(Notificar.Notificacion("exito", "Registro Exitoso", ""));
                }
                else
                {
                    NotificationService.Notify(Notificar.Notificacion("error", "Error al insertar, intente de nuevo.", ""));
                }
            }
        }
    }
    catch (Exception ex)
    {
        NotificationService.Notify(Notificar.Notificacion("error", "Error inesperado.", ex.Message));
    }

    isDesactivado = false;
}



    private bool ValidateFields(ReunionDTO reunion)
    {
        if (string.IsNullOrEmpty(reunion.Rdarea))
        {
            NotifyError("Seleccione el área.");
            return false;
        }
        if (string.IsNullOrEmpty(reunion.Rddiv))
        {
            NotifyError("Seleccione la división.");
            return false;
        }
        if (string.IsNullOrEmpty(reunion.Rddisc))
        {
            NotifyError("Llene la discrepancia.");
            return false;
        }
        if (string.IsNullOrEmpty(reunion.Rdstatus))
        {
            NotifyError("Seleccione el estado.");
            return false;
        }
        return true;
    }

    private void NotifyError(string message)
    {
        NotificationService.Notify(Notificar.Notificacion("advertencia", message, ""));
    }

    private void ResetFields()
    {
        Reuniondb = new ReunionDTO();
        CambStata = new CambStatDTO();
        CambFech = new CambFecDTO();
        idDiv = 0;
        idLin = 0;
        idEqui = 0;
        fechatrabajo = DateTime.Today;
        selectedEquipoId = selectedEquipoName = null;
        equiposfiltro = null;
    }

    protected async Task Reset()
    {
        ResetFields();
    }

    async Task HandleInput(ChangeEventArgs d)
    {
        filter = d.Value?.ToString();
        equiposfiltro = !string.IsNullOrEmpty(filter)
            ? MaestraData.equipos.Where(a => a.EcodEquiEam.Contains(filter, StringComparison.OrdinalIgnoreCase)).ToList()
            : null;
        selectedEquipoName = selectedEquipoId = null;
    }

    void SelectEquipo(string id)
    {
        selectedEquipoId = id;
        selectedEquipoName = equiposfiltro!.First(c => c.EcodEquiEam.Equals(selectedEquipoId)).EnombreEam;
        equiposfiltro = null;
    }
}
